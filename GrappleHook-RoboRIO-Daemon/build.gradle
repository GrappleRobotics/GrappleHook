plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2024.1.1-beta-4"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

model {
    components {
        grappleHookRoboRioDaemon(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it
            // wpi.cpp.deps.wpilibStatic(it)
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.useLibrary(it, "wpilibc_static", "hal_static", "wpiutil_static", "ni_link_libraries", "ni_runtime_libraries")
        }
    }
}

wrapper {
  gradleVersion '8.5'
}
